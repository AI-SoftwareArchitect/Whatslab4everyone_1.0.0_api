generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contacts {
  id           Int      @id @default(autoincrement())
  userid       String?  @db.Uuid
  frienduserid String   @db.Uuid
  updatedat    DateTime @db.Date
  User         User?    @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userid, frienduserid])
}

model Group {
  groupid           String              @id @db.Uuid
  updatedat         DateTime            @db.Date
  groupname         String
  GroupParticipants GroupParticipants[]
  Messages          Messages[]
}

model GroupParticipants {
  groupparticipantsid Int       @id @default(autoincrement())
  groupid             String?   @db.Uuid
  leftat              DateTime? @db.Date
  insertedat          DateTime  @db.Date
  userid              String?   @db.Uuid
  participantrole     String
  maxmember           Int?
  Group               Group?    @relation(fields: [groupid], references: [groupid], onDelete: Cascade, onUpdate: NoAction)
  User                User?     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Messages {
  messageid      Int      @id @default(autoincrement())
  groupchatid    String?  @db.Uuid
  deliveredat    DateTime @db.Date
  isread         Boolean
  messagecontent String
  senderid       String?  @db.Uuid
  Group          Group?   @relation(fields: [groupchatid], references: [groupid], onDelete: Cascade, onUpdate: NoAction)
  User           User?    @relation(fields: [senderid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model DirectMessages {
  directMessageId   String            @id @db.Uuid
  senderId          String            @db.Uuid
  receiverId        String            @db.Uuid
  content           String
  sendDate          DateTime
  status            String
}

model Profile {
  profileid          Int     @id @default(autoincrement())
  userid             String? @db.Uuid
  profilepicturename String?
  aboutme            String?
  User               User?   @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                String              @id @db.Uuid
  username          String
  email             String              @unique
  updatedat         DateTime            @db.Date
  hashedpassword    String
  lastseen          DateTime?           @default(now()) @db.Date
  Contacts          Contacts[]
  GroupParticipants GroupParticipants[]
  Messages          Messages[]
  Profile           Profile[]
}
